; 元素偏移量 offset 系列

; offset 概述
offset 翻译过来就是 偏移量 我们使用 offset 系列相关属性可以 动态的 得到该元素的位置(便宜) 大小等

1. 获取元素距离带有定位父元素的位置
2. 获得元素自身的大小(宽度高度)
3. 注意: 返回的数值都不带单位

; offset 系列常用属性
element.offsetParent        返回作为该元素带有定位的父级元素 如果父级都没有定位则返回 body
element.offsetTop           返回元素相对带有定位父元素上方的便宜
element.offsetLeft          返回元素相对带有定位元素左边框的偏移
element.offsetWidth         返回自身包括 padding 边框 内容区的宽度 返回数值不带单位
element.offsetHeight        返回自身包括 padding 边框 内容区的高度 返回数值不带单位

; offset 和 style 的区别

; offset
1. offset 可以得到任意样式表中的样式值
2. offset 系列获得的数值是没有单位的
3. offsetWidth 包含 padding+border+width
4. offsetWidth 等属性是只读属性 只能获取不能赋值
5. 所以 我们想要获取元素大小位置 用 offset 更合适

; style
1. style 只能得到行内样式表中的样式值
2. style.width 获得的是带有单位的字符串
3. style.width 获得不包含 padding和border的值
4. style.width 是可读写属性 可以获取也可以赋值
5. 所以 我们想要给元素更改值 则需要用 style 改变

; 获取鼠标在盒子内的坐标位置

element.pagex / pageY 鼠标在文档中的位置
element.offsetLeft 该元素距离文档左边的位置

得到鼠标在盒子内的位置则是用前者

; 元素可视区 client 系列

client 翻译过来就是客户端 我们使用 client 系列的相关属性来获取元素可视区的相关信息 通过 client 系列的相关属性可以动态的得到该元素的边框大小 元素大小等

element.clientTop           返回元素上边框的大小
element.clientLeft          返回元素左边框的大小
element.clientWidth         返回自身包括padding 内容区的宽度 不含边框 返回数值不带单位
element.clientHeight        返回自身包括padding 内容区的高度 不含边框 返回数值不带单位

client 宽度 和我们offsetWidth 最大的区别就是 不包含边框
其中的 padding 算进去 边框不包含

; 立即执行函数   (不需要调用 立马能够自己执行的函数)

(function () { })()  
或者
(function () { }());

; (function () { })() 
第二个小括号可以看作是调用函数

立即执行函数最大的作用就是 独立创建了一个作用域 里面所有的变量都是局部变量 不会有命名冲突的情况

; 物理像素比 - devicePixelRatio(dpr)

adjust body font siz 设置我们body的字体大小

reset rem unit on page resize 当我们页面尺寸大小发生变化的时候 要重新设置下 rem 的大小

pageshow 是我们重新加载页面触发的事件

; 下面三种情况都会刷新页面都会触发 load 事件
1. a标签的超链接
2. f5或者刷新按钮(强制刷新)
3. 前进后退按钮

但是火狐中 有个特点 有个 '返回缓存' 这个缓存中不仅保存看页面数据 还保存 DOM 和 javascript 的状态实际上是将整个页面都保存在内存里面
所以此时后退按钮不能刷新页面
在此时可以使用 padding 事件来触发 这个事件在页面显示时触发 无论页面是否来自缓存 在重新加载页面中 pageshow 会在 load 事件触发后触发
根据事件对象中的 presisted 来判断是否是缓存中的页面触发的 pageshow 事件 注意这个事件给 window 添加

; scroll 系列

; 元素 scroll 系列属性
scroll 翻译过来就是滚动的 我们使用 scroll 系列的相关属性可以动态的得到该元素的大小 滚动距离等

element.scrollTop       返回被卷去的上侧距离 返回数值不带单位
element.scrollLeft      返回被卷去的左侧距离 返回数值不带单位
element.scrollWidth     返回自身实际的宽度 不含边框 返回数值不带单位
element.scrollHeight    返回自身实际的高度 不含边框 返回数值不带单位

; 页面被卷去的头部
如果浏览器的高(或宽)度不足以显示整个页面时 会自动出现滚动条 当滚动条向下滚动时 页面上面被隐藏掉的高度 我们就称为页面被卷去的头部 滚动条在滚动时会触发 onscorll 事件

; mouseenter 鼠标事件

当鼠标移动到元素上时就会触发 mouseenter 事件
类似 mouseover 它们两者之间的差别是
mouseover 鼠标经过自身盒子会触发 经过子盒子还会触发 mouseenter 只会经过自身盒子触发
之所以这个样 就是因为 mouseenter 不会冒泡
跟 mouseenter 搭配鼠标离开 mouseleave 同样不会冒泡

; 动画函数封装

; 动画实现原理

; 核心原理: 
通过定时器 setlnterval() 不断移动盒子位置

; 步骤：
1. 获得盒子当前位置
2. 让盒子在当前位置加上1个移动距离
3. 利用定时器不断重复这个操作
4. 加一个结束定时器的条件
5. 注意此元素需要添加定位 才能使用 element.style.left

; 动画函数简单封装

; 函数需要传递两个参数：
动画对象 和 移动到的距离

; 动画函数给不同元素记录不同定时器
如果多个元素都是用这个动画函数 每次都要 var 声明定时器
我们可以给不同的元素使用不用的定时器(自己专门用自己的定时器)
核心原理：利用 js 是一门动态语言 可以很方便的给当前对象添加属性

; 缓动动画原理
缓动动画就是让元素运动速度有所变化 最常见的是让速度慢慢停下来

; 思路：
1. 让盒子每次移动的距离慢慢变小 速度就会慢慢落下来
2. 核心算法：(目标值-现在的位置) / 10 做为每次移动的距离步长
3. 停止的条件是：让当前盒子位置等于目标位置就停止定时器
4. 注意步长值需要取整

; 缓动动画就是：
盒子当前的位置 + 变化的值 ((目标值 - 现在的位置) / 10)

; 对于设定好的 500 像素 没有移动满 500 像素 而是少了几个像素？
这是因为我们设定的数值它除不尽

; 动画函数多个目标值之间移动
可以让动画函数从800移动到500

当我们点击按钮时 判断步长是正值还是负值
1. 如果是正值 则步长往大了取整
2. 如果是负值 则步长向小了取整

; 节流阀
防止轮播图按钮连续点击造成播放过快

节流阀目的：当上一个函数动画内容执行完毕 再去执行下一个函数动画 让事件无法连续触发

核心实现思路：利用回调函数 添加一个变量来控制 锁住函数和解锁函数
开始设置一个变量 var flag = true
if(flag){flag = false；do something} 关闭水龙头
利用回调函数 动画执行完毕 flag = true 打开水龙头

callback && callback();

















