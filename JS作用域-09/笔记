; JS作用域

概述：通常来说 一段程序代码中所用到的名字并不总是有效和可用的 而限定这个名字的 可用性的代码范围 就是这个名字的 作用域 作用域的使用提高了程序逻辑的局部性 增强了程序的可靠性 减少了名字冲突

; JavaScript 作用域

就是代码名字（变量）在某个范围内起作用和效果
目的 : 为了提高程序的可靠性 更重要的是减少命名冲突

; JS的作用域(es6) : 全局作用域   局部作用域 两种

全局作用域 : 整个 script 标签 或者一个单独的 js 文件

局部作用域(函数作用域) : 在函数内部就是局部作用域 这个代码的名字 只在函数内部起效果和作用

; 变量的作用域

在JavaScript中 根据作用域的不同 变量可以分为两种

1. 全局变量  2. 局部变量

; 1. 全局变量 

在全局作用域下的变量  在全局下都可以使用
注意 : 如果在函数内部 没有声明直接赋值的变量也属于全局变量

; 2. 局部变量 

在局部作用域下的变量 后者在函数内部的变量就是 局部变量
注意 : 函数的形参也可以看作是局部变量

; 3. 从执行效率来看全局变量和局部变量(两者区别！！！！！！！！！！！)

(1)全局变量只有浏览器关闭的时候才会销毁 比较占内存资源
(2)局部变量 当我们程序执行完毕就会销毁 比较节约内存资源

; 全局变量-总结

在全局作用域下声明的变量叫做 全局变量(在函数外部定义的变量)

1. 全局变量在代码的任何位置都可以使用
2. 在全局作用域下 var 声明的变量 是全局变量
3. 特殊情况下 在函数内不使用 var 声明的变量也是全局变量(不建议使用)

; 局部变量-总结

在局部作用域下声明的变量叫做 局部变量(在函数内部定义的变量)

1. 局部变量只能在该函数 内部 使用
2. 在函数内部 var 声明的变量是局部变量
3. 函数的 形参 实际上就是局部变量

; js 中没有块级作用域 

JS作用域: 全局作用域  局部作用域  现阶段我们js 没有 块级作用域
我们js 也是在 es6 的时候新增的块级作用域

; 什么是块级作用域  （暂时了解 现阶段 js还没有块级作用域）

用 {} 包含的就是  比如 if {}  for {}

在这里面声明的变量 外面是不能调用的

; 作用域链



