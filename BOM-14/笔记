; BOM概述

; 什么是 BOM

BOM 即 浏览器对象模型 它提供了独立于内容而与浏览器窗口进行交互的对象 其核心对象是 window

BOM 由一系列相关的对象构成 并且每个对象都提供了很多方法与属性

BOM 缺乏标准 JavaScript 语法的标准化组织是 ECMA DOM 的标准化组织是 W3C BOM 最初是 Netscape 浏览器标准的一部分

; DOM 和 BOM 区别

; DOM

1. 文档对象模型
2. DOM 就是把 文档 当做一个 对象 来看待
3. DOM 的顶级对象是 document
4. DOM 主要学习的是操作页面元素
5. DOM 是 W3C 标准规范

; BOM 

1. 浏览器对象模型
2. 把 浏览器 当做一个 对象 来看待
3. BOM 的顶级对象是 window
4. BOM 学习的是浏览器窗口交互的一些对象
5. BOM 是浏览器厂商在各自浏览器上定义的 兼容性较差

; BOM 的构成

window 对象是浏览器的顶级对象 它具有双重角色
1. 它是 JS 访问浏览器窗口的一个接口
2. 它是一个全局对象 定义在全局作用域中的变量 函数都会变成 window 对象的属性和方法
在调用的时候可以省略 window 前面学习的对话框都属于 window 对象方法 如 alert() prompt()

注意： window 下的一个特殊属性 window.name

; window 对象常见的事件

(一) 窗口加载事件
window.onload = function(){}
或者
window.addEventListener('load',function(){})

window.onload 是窗口(页面) 加载事件 当文档内容完全加载完成会触发该事件(包括图像 脚本文件 css文件等) 就调用的处理函数

; 注意: 

1. 有了 window.onload 就可以把 js 代码写到页面元素的上方 因为 onload 是等页面内容全部加载完毕后 再去执行处理函数
2. window.onload 传统注册事件方式只能写一次 如果有多个 会以最后一个 window.onload 为准
3. 如果使用 addEventListener 则没有限制

document.addEventListener('DOMContentLoaded',function(){})   ;IE9以上才支持

DOMContentLoaded 事件触发时 仅当DOM 加载完毕完成 不包括样式表 图片 falsh等等
如果页面的图片很多的话 从用户访问到 onload 触发可能需要较长的时间 交互效果就不能实现 必然影响用户的体验 此时用 DOMContentLoaded 事件比较合适

; 调整窗口大小事件

window.onresize = function(){}
window.addEventListener('resize',function(){})

window.onresize 是调整窗口大小加载事件 当触发时就调用的处理函数

; 注意: 
1. 只要窗口大小发生像素变化 就会触发这个事件
2. 我们经常利用这个事件完成响应式布局 window.innerWidth 当前屏幕的宽度

; 定时器

window 对象给我们提供了2个非常好用的方法 定时器
1. setTimeout()
2. setInterval()


; setTimeout() 定时器
window.setTimeout(调用函数,[延迟的毫秒数]);

setTimeout() 方法用于设置一个定时器 该定时器在定时器到期后执行调用函数

; 注意: 

1. window 可以省略
2. 这个调用函数可以 直接写函数 或者写函数名 或者采取字符串'函数名()' 三种形式 第三种不推荐
3. 延迟的毫秒数省略默认为 0 如果写 必须是毫秒

; setTimeout() 定时器

window.setTimeout(调用函数, [延迟的毫秒数]);

setTimeout() 这个调用函数我们也成为 回调函数 callback

普通函数是按照代码顺序直接调用
而这个函数 需要等待 时间 时间到了才去调用这个函数 因此称为回调函数

简单理解: 回调 就是回头调用的意思 上一件事干完后 再回头再调用这个函数

以前讲的 element.onclick = function(){} 或者 element.addEventListener('click',fn) 里面的函数也是回调函数
意思就是 当我们点击了这个元素 才会返回来调用这个函数 如果不点击 就不会调用这个函数

; 停止 setTimeout() 定时器

window.clearTimeout(timerout ID)

clearTimeout() 方法取消了先前通过调用 setTimeout() 建立的定时器

; 注意: 
1. window 可以省略
2. 里面的参数就是定时器的标识符

; setInterval() 定时器

window.setInterval(回调函数,[间隔的毫秒数])
setInterval() 方法重复调用一个函数 每隔这个时间 就去调用一次回调函数

; 注意:
1. window 可以省略
2. 这个调用函数可以 直接写函数 或者写函数名 或者采取字符串'函数名()'三种形式
3. 间隔的毫秒数省略默认为 0 如果写 必须是毫秒 表示每隔多少毫秒就自动调用这个函数
4. 因为定时器可能有很多 所以我们经常给定时器赋值一个标识符

; setTimeout 和 setInterval 的区别

setTimeout 延时时间到了 就去调用这个回调函数 只调用一次 就结束了这个定时器
setInterval 每隔这个延时时间 就去调用这个回调函数 会调用很多次 重复调用这个函数

; 停止 setInterval() 定时器

window.clearInterval(interval ID)
clearInterval() 方法取消了先前通过调用 setInterval() 建立的定时器

; 注意:
1. window 可以省略
2. 里面的参数就是定时器的标识符

; this指向问题

; js执行队列

; js 是单线程
JavaScript 语言的一大特点就是 单线程 也就是说 同一个时间只能做一件事 
这是因为 JavaScript 这门脚本语言诞生的使命所致
JavaScript 是为处理页面中用户的交互 以及操作 DOM 而诞生的 
比如我们对某个 DOM 元素进行添加和删除操作 不能同时进行 应该先进行添加 之后再删除

单线程就意味着 所以任务需要排队 前一个任务结束 才会执行后一个任务 
这样所导致的问题是: 如果 js 执行的时间过长 这样就会造成页面的渲染不连贯 导致页面渲染加载阻塞的感觉

; 同步 和 异步

为了解决上述问题 利用多核 cpu 的计算能力 html5 提出 web worker 标准 允许JavaScript脚本创建多个线程 于是 js中出现了 同步和异步

; 同步

前一个任务结束后再执行后一个任务 程序的执行顺序与任务的排列顺序是一致的 同步的 
比如做饭的同步做法: 我们要烧水煮饭 等水开了(10分钟之后) 再去切菜 炒菜

; 异步

你在做一件事时 因为这件事会花费很长时间 在做这件事的同时 你还可以去处理其他事情
比如做饭的异步做法 我们在烧水的同时 利用这 10分钟 去切菜 炒菜

他们本质区别: 这条流水线上各个流程的执行顺序不同

; 同步任务
同步任务都在主线程上执行 形成一个执行栈

; 异步任务
js的异步是通过回调函数实现的
一般而言 异步任务有以下三种类型:
1. 普通事件 如 click resize 等
2. 资源加载 如 load error 等
3. 定时器 包括 setInterval setTimeout 等

异步任务相关 回调函数 添加到 任务队列 中 (任务队列也称为信息队列)

; js执行机制
1. 先执行 执行栈中的同步任务
2. 异步任务(回调函数) 放入任务队列中
3. 一旦执行栈中的所有同步任务执行完毕 系统就会按次序读取 任务队列 中的异步任务 于是被读取的异步任务结束等待状态 进入执行栈 开始执行
 
由于主线程不断的重复获得任务 执行任务 再获取任务 再执行 所以这种机制被称为 事件循环 (event loop)

; location 对象
window 对象给我们提供了一个 location属性 用于 获取或设置窗体的url 并且可以用于 解析url
因为这个属性返回的是一个对象 所以我们将这个属性也称为 location对象

; URL
统一资源定位符 是互联网上标准资源的网址 互联网上的每个文件都有一个唯一的URL 它包含的信息指出文件的位置以及浏览器应该怎么处理它

URL 的一般语法格式为:
protocol://host[:port]/path/[?query]#fragment
http://ww.itcast.cn/index.html?name=andy&age=18#link

protocol 通信协议 常用的 http ftp maito 等
host 主机(域名) www.itheima.com
port 端口号 可选 省略时使用方案的默认端口 如 http 的默认端口为 80
path 路径 由 零或多个'/' 符号隔开的字符串 一般用来表示主机上的一个目录或文件地址
query 参数 以键值对的形式 通过 & 符号分割开来
fragment 片段 #后面内容 常见于链接 锚点

127.0.0.1:5500

; location 对象的属性
location.href 获取或者设置 整个url
location.host 返回主机(域名) www.itheima.com
location.port 返回端口号 如果未写返回空字符串
location.pathname 返回路径
location.search 返回参数
location.hash 返回片段 #后面的内容 常见于 链接 锚点

; location对象的方法

location.assign() 跟 href 一样 可以跳转页面(也称为重定向页面)
location.replace() 替换当前页面 因为不记录历史 所以不能后退页面
location.reload() 重新加载页面 相当于刷新按钮或者 f5 如果参数为 true 强制刷新 ctrl+f5

; navigator 对象

navigator 对象包含有关浏览器的信息 它有很多属性 我们常用的是 userAgent 
该属性可以返回由客户机发送服务器的 uesr-agent 头部的值

下面前端代码可以判断用户哪个终端打开页面 实现跳转

if ((navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i))) {
    window.location.href = "../H5/index.html"; //手机
}

; history

 window 对象给我们提供了一个history对象 与浏览器历史记录进行交互 该对象包含用户(在浏览器窗口中)访问过的url

;  history对象方法
back() 可以后退功能
forward() 前进功能
go(参数) 前进后退功能 参数如果是 1 前进1个页面 如果是 -1 后退一个页面


