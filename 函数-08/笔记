; 函数的概念

函数: 就是封装了一段 可被重复调用执行的代码块 通过此代码块可以实现大量代码的重复使用

函数使用分为两步 声明函数 和 调用函数

; 声明函数

function 函数名() {
    // 函数体
}

function 声明函数的关键词 全部小写
函数是做某件事 函数名一般为 动词 sayHi
函数不调用自己不执行

; 调用函数

函数名()

调用函数的时候不要忘记加 小括号!!!!!

注: 声明函数本身并不会执行代码！！！ 只有调用函数时才会执行函数体代码


; 函数的封装

就是把一个或多个功能通过 函数的方法封装起来 对外只提供一个简单的函数接口

简单理解: 类似于电脑配件整合组装到机箱中（类似快递打包）

; 函数的参数

分为 1. 形参 2. 实参

; 1. 函数可以重复相同的代码

function cook() {
    console.log('酸辣土豆丝');
}
cook();
cook();

; 2. 我们可以利用函数的参数 实现函数重复不同的代码

function 函数名(形参1, 形参2) { // 在声明函数的小括号里面是 形参 (形式上的参数)
}
函数名(实参1, 实参2)； // 在函数调用的小括号里面是 实参 (实际的参数)

; 3. 形参和实参的执行过程

function cook(aru) { // 形参是接收实参的  aru = '酸辣土豆丝'  形参类似于一个变量 
    console.log(aru);
}
cook('酸辣土豆丝');
cook('大肘子');

; 4. 函数的参数可以有 也可以没有 个数不限

参数的作用: 在 函数内部 某些值不能固定 我们可以通过参数在 调用函数时传递 不同的值进去

; 注意点

多个参数之间用逗号隔开
形参可以看作是不用声明的变量

; 函数形参和实参个数不匹配问题

1. 如果实参的个数和形参的个数一致，则正常输出结果

2. 如果实参的个数多于形参的个数 会取到形参的个数

3. 如果实参的个数小于形参的个数 多于的形参定义为 undefined 最终的结果为 NaN

; 小结: 

函数可以带参数 也可以不带参数
声明函数的时候 函数名括号里面的是形参 形参的默认值为 undefined
调用函数的时候 函数名括号里面的是形参
多个参数之间用逗号隔开
形参的个数可以和实参个数不匹配 但是结果不可预计 我们尽量要匹配

; 函数的返回值

return 语句
有的时候 我们会希望函数将值返回给调用者 此时通过使用 return 语句就可以实现

; 函数的返回值格式

function 函数名(){
    return 需要返回的结果;
}
函数名();

(1) 我们函数只是实现某种功能 最终的结果需要返回给函数的调用者 函数名() 通过 return 实现的
(2) 只要函数遇到 return 就把后面的结果 返回给函数的调用者 函数名() = return 后面的结果

例:

function cook(aru) {
    return aru;
}
console.log(cook('大肘子'));

; return 终止函数

return 后面的代码不会被执行

; return 的返回值

return 只能返回一个值 如果用逗号隔开多个值 以最后一个为准

输出多个值：函数 对象等

函数没有return 

break continue return 的区别

break: 结束当前的循环体（如 for while 
continue: 跳出本次循环 继续执行下次循环（如 for while
return: 不仅可以退出循环 还能够返回 return 语句中的值 同时还可以结束当前的函数体内的代码

; arguments 的使用

当我们不确定有多少个参数传递的时候 可以用 arguments 来获取 在 js 中 arguments 实际上它是当前函数的一个 内置对象 所有函数都内置了一个 arguments 对象 arguments 对象中 存储了传递的所有实参

arguments 展示形式是一个伪数组 因此可以进行遍历 伪数组具有以下特点：
1.具有 length 属性
2.按索引方式储存数据
3.不具有数组的 push pop 等方法

; 函数可以互相调用

; 函数两种声明方式

; 1. 利用函数关键字定义函数 命名函数

function fn() {
}
fn();

; 2. 函数表达式(匿名函数)

var 变量名 = function () { };

(1) fun 是变量名 不是函数名
(2) 函数表达式声明方式跟声明变量差不多 只不过变量里面存的是值 而 函数表达式里面存的是函数
(3) 函数表达式也可以进行传递参数